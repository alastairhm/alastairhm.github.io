<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>python on 0x32++</title><link>https://blog.0x32.co.uk/tags/python/</link><description>Recent content in python on 0x32++</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 03 Nov 2023 15:58:16 +0000</lastBuildDate><atom:link href="https://blog.0x32.co.uk/tags/python/index.xml" rel="self" type="application/rss+xml"/><item><title>Python icecream debug</title><link>https://blog.0x32.co.uk/posts/python_icecream/</link><pubDate>Fri, 03 Nov 2023 15:58:16 +0000</pubDate><guid>https://blog.0x32.co.uk/posts/python_icecream/</guid><description>Icecream Debug Do you ever use print() or log() to debug your code? Of course you do. IceCream, or ic for short, makes print debugging a little sweeter.
ic() is like print(), but better.
https://github.com/gruns/icecream</description></item><item><title>TFT Display ST7735 MicroPython</title><link>https://blog.0x32.co.uk/posts/pico8/</link><pubDate>Fri, 17 Feb 2023 16:31:44 +0000</pubDate><guid>https://blog.0x32.co.uk/posts/pico8/</guid><description>I got a cheap SPI TFT ST7735 Display module with SD Card reader off ebay, it had an unusual number of pins on the back.
Numbers It took a while searching about on the internet and some head scratching to find a library and work out what connected to what on the Pico.
This is what I found, and worked out.
TFT Board Raspberry Pi Pin LED 3v3(Out) SCK GP10 SDA GP11 AO/DC GP16 Reset GP17 CS GP18 GND GND VCC VBUS 5V Using that information I was able to put together this library based on a few others I found and a few test programs.</description></item><item><title>Small LED Matrix Numbers</title><link>https://blog.0x32.co.uk/posts/pico7/</link><pubDate>Thu, 26 Jan 2023 15:16:16 +0000</pubDate><guid>https://blog.0x32.co.uk/posts/pico7/</guid><description>Something I did a few (8) years ago on the Arduino to display two-digit numbers on a 8x8 LED matrix, this is an update to do the same in Micropthon.
Numbers have been defined to 3x5 pixels, so for a two-digit number it fits into 8x5 LED grid with spacing, saving some LED Matrix space.
Numbers The code for this can be found here numbers.py
This original Arduino code is here.</description></item><item><title>DHT11 Sensor in Micropython</title><link>https://blog.0x32.co.uk/posts/pico6/</link><pubDate>Mon, 23 Jan 2023 16:39:29 +0000</pubDate><guid>https://blog.0x32.co.uk/posts/pico6/</guid><description>Just a short bit of code to test a DHT11 temperature and humidity sensor module.
This version has just three pins VCC, GND and data, so easy to connect and use with the DHT library.
dht11.py.
DHT11 Module</description></item><item><title>Raspberry Pi Pico W LED Matrix</title><link>https://blog.0x32.co.uk/posts/pico5/</link><pubDate>Fri, 20 Jan 2023 09:56:40 +0000</pubDate><guid>https://blog.0x32.co.uk/posts/pico5/</guid><description>Found a LED Matrix with a Max7219 in my parts bin (box of random electronics in the garage) so looked into getting it working with the Pico and MicroPython.
This is an example why I love open source. The original library I found was functional but sparse, last committed to 4 years ago. There were a few forks, most not much activity. One had been active recently and had some major improvements in functionality so switched over to that fork.</description></item><item><title>Raspberry Pi Pico W Mandelbrot Set</title><link>https://blog.0x32.co.uk/posts/pico4/</link><pubDate>Tue, 17 Jan 2023 12:29:25 +0000</pubDate><guid>https://blog.0x32.co.uk/posts/pico4/</guid><description>Stumbled across a Python script to run a Mandelbrot set in ASCII in Python so I thought I would see how it ran on the RaspberryPi Pico.
After tweaking it slightly from the source it ended up like this mandelbrot.py
This results in the following;
i;;::::-------,,,,,,,,,............................. .............,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,----------:::;ih$+;;::::-------,,,,,,,,,.......................... ...........,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,------------::::;;+# hiiii :---------,,,,,,,,,....................... .........,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,-------------:::::;;i+hM MM #+;;:---------,,,,,,,,,,.................... .........,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,--------------::::::;;ii+hH* $H+ii;:::---------,,,,,,,,,,.................. ........,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,---------------::::::;i+HhH *h++;;::::---------,,,,,,,,,,................ .......,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,---------------::::::;;;+ *@ +i;::::::-------,,,,,,,,,,,.............. .....,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,---------------::::;;;;;ii+hM@ $hii;;:::::::------,,,,,,,,,,,............ .</description></item><item><title>Raspberry Pi Pico W Temperature</title><link>https://blog.0x32.co.uk/posts/pico3/</link><pubDate>Tue, 17 Jan 2023 12:29:22 +0000</pubDate><guid>https://blog.0x32.co.uk/posts/pico3/</guid><description>Have been tinkering with temperature measurement using the Raspberry Pi Pico.
First with the internal temperature sensor and then using a TMP36 temperature sensor externally.
I wrote two classes to access these and return the reading.
Internal Temperature External Temperature Here is an example using the two sensors together temps.py
You will need to upload the two classes to the Pico first in a library sub-directory.
Here is how you would wire it up on a breadboard tmp36.</description></item><item><title>Rasberry Pi Pico W OLED</title><link>https://blog.0x32.co.uk/posts/pico2/</link><pubDate>Tue, 10 Jan 2023 13:38:21 +0000</pubDate><guid>https://blog.0x32.co.uk/posts/pico2/</guid><description>Some components arrived from AliExpress recently so been able to play with an I2C OLED display with my Pico W.
Hello World Test
Hello World Test Code of this is here https://github.com/alastairhm/pico_w/blob/main/i2c_scan.py
And also used here to display the IP address after connected to the wifi https://github.com/alastairhm/pico_w/blob/main/wifi_oled.py
Next thing I&amp;rsquo;ve been playing with is internal and external temperature sensors, I will post about that soon.</description></item><item><title>Raspberry Pi Pico W</title><link>https://blog.0x32.co.uk/posts/pico/</link><pubDate>Wed, 04 Jan 2023 13:31:23 +0000</pubDate><guid>https://blog.0x32.co.uk/posts/pico/</guid><description>Just before Christmas I got a Raspberry Pi Pico W to have a play with.
Looking forward to using MicroPython to do some LED flashing and other things.
Started a repo on Github for it Pico W Repo</description></item><item><title>Search from the command line</title><link>https://blog.0x32.co.uk/posts/searchit/</link><pubDate>Fri, 02 Sep 2022 10:05:23 +0100</pubDate><guid>https://blog.0x32.co.uk/posts/searchit/</guid><description>A simple Python script to allow you to quickly search from the command line that I&amp;rsquo;ve been playing with on and off for a while.
https://github.com/alastairhm/searchit
It uses the Python Library Fire to automatically generate the command line interface which is something I stumbled across recently.
You either pass it a paramater for the search term or if one it not passed it used whatever is in your clipboard buffet.</description></item><item><title>Clipboard History</title><link>https://blog.0x32.co.uk/posts/cliphistory/</link><pubDate>Mon, 09 Aug 2021 12:07:54 +0100</pubDate><guid>https://blog.0x32.co.uk/posts/cliphistory/</guid><description>I wrote a simple Python script to monitor the clipboard and write any unique text content out to a YAML file for a history. It might turn into something better eventually.
Update Updated to use a settings file for file location and size.
#!/usr/bin/env python3 import pyperclip import time import yaml import toml import os from yaml.loader import SafeLoader script_path = os.path.dirname(os.path.abspath(__file__)) settings = toml.load(os.path.join(script_path, &amp;#34;clippy.toml&amp;#34;)) history = settings[&amp;#34;history&amp;#34;] max_size = settings[&amp;#34;size&amp;#34;] cliptext = &amp;#34;&amp;#34; clip_array = [] with open(history, &amp;#34;r&amp;#34;) as f: clip_array = list(yaml.</description></item><item><title>CA Thumbprint from Python</title><link>https://blog.0x32.co.uk/posts/thumbprint/</link><pubDate>Wed, 02 Dec 2020 13:29:00 +0000</pubDate><guid>https://blog.0x32.co.uk/posts/thumbprint/</guid><description>Recently had a need to get the CA Thumbprint from the Root certificate of a domain. This was for creating OIDC provider for an AWS EKS cluster.
This is the solution I came up with.</description></item></channel></rss>